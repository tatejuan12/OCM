import { Meta } from './Meta';
import { Storage } from './Storage';
import { Payload } from './Payload';
import { xApp } from './xApp';
import type * as Types from './types/xumm-api';
import type { xAppOttData, UserTokenValidity, xAppJwtOtt } from './types/index';
declare class XummSdk {
    private Meta;
    storage: Storage;
    payload: Payload;
    xApp: xApp;
    constructor(apiKey?: string, apiSecret?: string);
    private getEnv;
    /**
     * Proxy methods to Meta class below
     */
    ping(): Promise<import("./types").ApplicationDetails>;
    getCuratedAssets(): Promise<import("./types").CuratedAssetsResponse>;
    getRates(currencyCode: string): Promise<import("./types").RatesResponse>;
    getKycStatus(userTokenOrAccount: string): Promise<"NONE" | "IN_PROGRESS" | "REJECTED" | "SUCCESSFUL">;
    getTransaction(txHash: string): Promise<import("./types").XrplTransaction>;
    verifyUserTokens(userTokens: string[]): Promise<UserTokenValidity[]>;
    verifyUserToken(token: string): Promise<UserTokenValidity | null>;
    setEndpoint(endpoint: string): boolean;
    caught(error: Error): void;
}
interface XummJwtOptionsStore {
    get: (ott: string) => xAppJwtOtt | void;
    set: (ott: string, ottData: xAppJwtOtt) => void;
}
export interface XummSdkJwtOptions {
    store?: XummJwtOptionsStore;
    fatalHandler?: (error: Error) => void;
}
declare class XummSdkJwt extends XummSdk {
    private ottResolved;
    private resolve;
    private reject;
    fatalHandler?: (error: Error) => void;
    private store;
    constructor(apiKeyOrJwt: string, ott?: string, options?: XummSdkJwtOptions);
    _jwtStore(invoker: Meta, persistJwt: (jwt: string) => void): XummJwtOptionsStore;
    getOttData(): Promise<xAppOttData>;
    caught(error: Error): void;
}
export { XummSdk, XummSdkJwt };
export type { Types as XummTypes };
