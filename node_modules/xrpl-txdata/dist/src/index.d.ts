import { FormattedBalanceChanges } from './ext-dependencies/balanceParser';
export { parseBalanceChanges } from './ext-dependencies/balanceParser';
export declare const utils: {
    currencyCodeFormat: (string: string, maxLength?: number) => string;
    xrplValueToNft: (value: string | number) => number | boolean;
    nftValuetoXrpl: (value: string | number, accountBalance?: string | number | undefined) => string;
};
export declare type AnyJson = Record<string, unknown>;
export interface TxResult extends AnyJson {
    hash: string;
    Account?: string;
    Destination?: string;
    meta: AnyJson;
}
declare type TxNotFound = {
    id?: string;
    status: string;
    type: string;
    error: string;
    error_code: number;
    request?: AnyJson;
};
declare type ResolvedLookup = {
    result: TxResult | TxNotFound;
    balanceChanges: FormattedBalanceChanges;
    resolvedBy: string;
    host: string;
};
declare type TxDataOptions = {
    EndpointTimeoutMs?: number;
    OverallTimeoutMs?: number;
    AllowNoFullHistory?: boolean;
};
export declare class TxData {
    private Ended;
    private WsConnections;
    private ReadyConnections;
    private CommandId;
    private Endpoints;
    private EventBus;
    private ConnectionAndQueryTimeoutMs;
    private LookupTimeoutMs;
    private AllowNoFullHistory;
    constructor(endpoints?: Array<string>, options?: TxDataOptions);
    /**
     * Constructor helpers
     */
    private ParseEndpoints;
    private ParseOptions;
    /**
     * PUBLIC
     */
    end(): void;
    getOne(TxHash: string, WaitForSeconds?: number): Promise<ResolvedLookup>;
    get(TxHash: string, WaitForSeconds?: number): Promise<ResolvedLookup>;
    /**
     * PRIVATE
     */
    private FormatResult;
    private GenerateError;
    private Connect;
    private ConnectAndQuery;
    private QueryConnection;
}
